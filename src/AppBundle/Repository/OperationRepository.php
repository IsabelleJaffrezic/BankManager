<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Categorie;
use AppBundle\Entity\Compte;
use AppBundle\Entity\Operation;

/**
 * OperationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OperationRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAPointerByCompte(Compte $compte, $filter)
    {
        $query = 'SELECT o, m 
                  FROM AppBundle:Operation o
                  LEFT JOIN o.modePaiement m
                  WHERE o.dateValeur IS NULL AND o.compte = :compte';

        if (array_key_exists('categorie', $filter) && $filter['categorie'] === 'none') {
            $query .= ' AND o.categorie IS NULL';
        } elseif (array_key_exists('categorie', $filter) && ctype_digit($filter['categorie'])) {
            $query .= ' AND o.categorie = :categorie';
        }

        if (array_key_exists('libelle', $filter) && !empty($filter['libelle'])) {
            $query .= ' AND o.libelle LIKE :libelle';
        }

        $query .= ' ORDER BY o.dateOperation DESC';

        $operationList = $this->_em
            ->createQuery($query)
            ->setParameter('compte', $compte);

        if (array_key_exists('categorie', $filter) && ctype_digit($filter['categorie']) && $filter['categorie'] !== 'none') {
            $operationList->setParameter('categorie', $filter['categorie']);
        }

        if (array_key_exists('libelle', $filter) && !empty($filter['libelle'])) {
            $operationList->setParameter('libelle', '%'.$filter['libelle'].'%');
        }

        return $operationList->getResult();
    }

    public function findPointeeByCompte(Compte $compte, $filter)
    {
        $query = 'SELECT o, m 
                 FROM AppBundle:Operation o
                 LEFT JOIN o.modePaiement m
                 WHERE o.dateValeur IS NOT NULL AND o.compte = :compte';

        if (array_key_exists('categorie', $filter) && $filter['categorie'] === 'none') {
            $query .= ' AND o.categorie IS NULL';
        } elseif (array_key_exists('categorie', $filter) && ctype_digit($filter['categorie'])) {
            $query .= ' AND o.categorie = :categorie';
        }

        if (array_key_exists('libelle', $filter) && !empty($filter['libelle'])) {
            $query .= ' AND o.libelle LIKE :libelle';
        }

        $query .= ' ORDER BY o.dateOperation DESC';

        $operationList = $this->_em
            ->createQuery($query)
            ->setParameter('compte', $compte);

        if (array_key_exists('categorie', $filter) && ctype_digit($filter['categorie']) && $filter['categorie'] !== 'none') {
            $operationList->setParameter('categorie', $filter['categorie']);
        }

        if (array_key_exists('libelle', $filter) && !empty($filter['libelle'])) {
            $operationList->setParameter('libelle', '%'.$filter['libelle'].'%');
        }

        return $operationList->getResult();
    }

    public function findOperation(Operation $operation)
    {
        $qb = $this->createQueryBuilder('o')
            ->where('o.libelle = :libelle')->setParameter('libelle', $operation->getLibelle())
            ->andWhere('o.modePaiement = :modepaiement')->setParameter('modepaiement', $operation->getModePaiement()->getId())
            ->andWhere('o.montant = :montant')->setParameter('montant', $operation->getMontant())
            ->andWhere('o.dateOperation = :dateOperation')->setParameter('dateOperation', $operation->getDateOperation()->format('Y-m-d'));

        if ($operation->getDateValeur() instanceof \DateTime) {
            $qb->andWhere('o.dateValeur = :dateValeur')->setParameter('dateValeur', $operation->getDateValeur()->format('Y-m-d'));
        }

        return $qb->getQuery()->getOneOrNullResult();
    }
}
